.. _scalar_api:

##########
Scalar API
##########

.. toctree::
    :maxdepth: 1
    
    scalar_s16
    scalar_s32
    scalar_f32
    scalar_float_s32
    scalar_float_complex_s16
    scalar_float_complex_s32
    scalar_misc

----

* `Scalar Type Conversion <scalar_type_conversion_>`_
* `Fixed-Point Scalar Ops <scalar_fixed_point_ops_>`_
* `IEEE 754 Float Scalar Ops <scalar_f32_ops_>`_
* `Non-standard Float Scalar Ops <scalar_float_ops_>`_
* `Non-standard Complex Float Scalar Ops <scalar_complex_float_ops_>`_


.. _scalar_type_conversion:


+-------------------------------------------------------------------------------------------+
| **Scalar Type Conversions**                                                               |
+-------------------------------------+-----------------------------------------------------+
|  Function                           | Type                                                |
|                                     +--------------------------+--------------------------+
|                                     | Input(s)                 | Output(s)                |
+=====================================+==========================+==========================+
|  :c:func:`f32_unpack()`             | ``float``                | | ``int32_t``            |
|                                     |                          | | :c:type:`exponent_t`   |
+-------------------------------------+--------------------------+--------------------------+
|  :c:func:`f32_unpack_s16()`         | ``float``                | | ``int16_t``            |
|                                     |                          | | :c:type:`exponent_t`   |
+-------------------------------------+--------------------------+--------------------------+
|  :c:func:`f32_to_float_s32()`       | ``float``                | :c:type:`float_s32_t`    |
+-------------------------------------+--------------------------+--------------------------+
|  :c:func:`f64_to_float_s32()`       | ``double``               | :c:type:`float_s32_t`    |
+-------------------------------------+--------------------------+--------------------------+
|  :c:func:`float_s32_to_float_s64()` | :c:type:`float_s32_t`    | :c:type:`float_s64_t`    |
+-------------------------------------+--------------------------+--------------------------+
|  :c:func:`float_s32_to_float()`     | :c:type:`float_s32_t`    | ``float``                |
+-------------------------------------+--------------------------+--------------------------+
|  :c:func:`float_s32_to_double()`    | :c:type:`float_s32_t`    | ``double``               |
+-------------------------------------+--------------------------+--------------------------+
|  :c:func:`s16_to_s32()`             | | ``int16_t``            | | ``int32_t``            |
|                                     | | :c:type:`exponent_t`   | | :c:type:`exponent_t`   |
+-------------------------------------+--------------------------+--------------------------+
|  :c:func:`s32_to_s16()`             | | ``int32_t``            | | ``int16_t``            |
|                                     | | :c:type:`exponent_t`   | | :c:type:`exponent_t`   |
+-------------------------------------+--------------------------+--------------------------+
|  :c:func:`s64_to_s32()`             | | ``int64_t``            | | ``int32_t``            |
|                                     | | :c:type:`exponent_t`   | | :c:type:`exponent_t`   |
+-------------------------------------+--------------------------+--------------------------+
|  :c:func:`s32_to_f32()`             | | ``int32_t``            | ``float``                |
|                                     | | :c:type:`exponent_t`   |                          |
+-------------------------------------+--------------------------+--------------------------+
|  :c:func:`radians_to_sbrads()`      | :c:type:`radian_q24_t`   | :c:type:`sbrad_t`        |
+-------------------------------------+--------------------------+--------------------------+
|  :c:func:`s32_to_chunk_s32()`       | ``int32_t``              | ``int32_t[8]``           |
+-------------------------------------+--------------------------+--------------------------+
|  :c:func:`float_s64_to_float_s32()` | :c:type:`float_s64_t`    | :c:type:`float_s32_t`    |
+-------------------------------------+--------------------------+--------------------------+


.. _scalar_fixed_point_ops:
 

+-----------------------------------------------------------------------------+
| **Fixed-Point Scalar Ops**                                                  |
+-------------------------------+------+------+-------------------------------+
| Function                      | Input| Frac |  Brief                        |
|                               | Depth| Bits |                               |
+===============================+======+======+===============================+
| :c:func:`s16_inverse()`       |  16  |  0   | :math:`x^{-1}`                |
+-------------------------------+------+------+-------------------------------+
| :c:func:`s32_inverse()`       |  32  |  0   | :math:`x^{-1}`                |
+-------------------------------+------+------+-------------------------------+
| :c:func:`sbrad_sin()`         |  32  |  31  | :math:`\sin(x)`               |
+-------------------------------+------+------+-------------------------------+
| :c:func:`sbrad_tan()`         |  32  |  31  | :math:`\tan(x)`               |
+-------------------------------+------+------+-------------------------------+
| :c:func:`q24_sin()`           |  32  |  24  | :math:`\sin(x)`               |
+-------------------------------+------+------+-------------------------------+
| :c:func:`q24_cos()`           |  32  |  24  | :math:`\cos(x)`               |
+-------------------------------+------+------+-------------------------------+
| :c:func:`q24_tan()`           |  32  |  24  | :math:`\tan(x)`               |
+-------------------------------+------+------+-------------------------------+
| :c:func:`q30_exp_small()`     |  32  |  30  | :math:`\exp(x)`               |
+-------------------------------+------+------+-------------------------------+
| :c:func:`q24_logistic()`      |  32  |  24  | :math:`\frac{1}{1+e^{-x}}`    |
+-------------------------------+------+------+-------------------------------+
| :c:func:`q24_logistic_fast()` |  32  |  24  | :math:`\frac{1}{1+e^{-x}}`    |
+-------------------------------+------+------+-------------------------------+
| :c:func:`q30_powers()`        |  32  |  30  | :math:`(0,x,x^2,x^3,\dots)`   |
+-------------------------------+------+------+-------------------------------+
| :c:func:`u32_ceil_log2()`     |  32  |  0   | :math:`\lceil\log_2(x)\rceil` |
+-------------------------------+------+------+-------------------------------+

.. _scalar_f32_ops:


+----------------------------------------------------------------+
| **IEEE 754 Float Ops**                                         |
+-------------------------------+--------------------------------+
|  Function                     |  Brief                         |
+===============================+================================+
|  :c:func:`f32_sin()`          |  :math:`sin(x)`                |
+-------------------------------+--------------------------------+
|  :c:func:`f32_cos()`          |  :math:`cos(x)`                |
+-------------------------------+--------------------------------+
|  :c:func:`f32_log2()`         |  :math:`log_2(x)`              |
+-------------------------------+--------------------------------+
|  :c:func:`f32_power_series()` |  Evaluate Power Series         |
+-------------------------------+--------------------------------+
|  :c:func:`f32_normA()`        |  Normalized Form A             |
+-------------------------------+--------------------------------+


.. _scalar_float_ops:


+------------------------------------------------------------------------+
| **Non-standard Scalar Float Ops**                                      |
+---------------------------------+--------------------------------------+
|  Function                       |  Brief                               |
+=================================+======================================+
|  :c:func:`float_s32_mul()`      | :math:`x \times y`                   |
+---------------------------------+--------------------------------------+
|  :c:func:`float_s32_add()`      | :math:`x + y`                        |
+---------------------------------+--------------------------------------+
|  :c:func:`float_s32_sub()`      | :math:`x - y`                        |
+---------------------------------+--------------------------------------+
|  :c:func:`float_s32_div()`      | :math:`\frac{x}{y}`                  |
+---------------------------------+--------------------------------------+
|  :c:func:`float_s32_abs()`      | :math:`\left|x\right|`               |
+---------------------------------+--------------------------------------+
|  :c:func:`float_s32_gt()`       | :math:`x \gt y`                      |
+---------------------------------+--------------------------------------+
|  :c:func:`float_s32_gte()`      | :math:`x \ge y`                      |
+---------------------------------+--------------------------------------+
|  :c:func:`float_s32_ema()`      | :math:`\alpha x + (1 - \alpha) y`    |
+---------------------------------+--------------------------------------+
|  :c:func:`float_s32_sqrt()`     | :math:`\sqrt{x}`                     |
+---------------------------------+--------------------------------------+
|  :c:func:`float_s32_exp()`      | :math:`exp(x)`                       |
+---------------------------------+--------------------------------------+
|  :c:func:`s16_mul()`            | :math:`x \times y`                   |
+---------------------------------+--------------------------------------+
|  :c:func:`s32_sqrt()`           | :math:`\sqrt{x}`                     |
+---------------------------------+--------------------------------------+
|  :c:func:`s32_mul()`            | :math:`x \times y`                   |
+---------------------------------+--------------------------------------+
|  :c:func:`s32_odd_powers()`     | :math:`x, x^3, x^5, x^7, \dots`      |
+---------------------------------+--------------------------------------+


.. _scalar_complex_float_ops:


+----------------------------------------------------------------------------------------+
| **Non-standard Complex Scalar Float Ops**                                              |
+-------------------------------------------------+--------------------------------------+
|  Function                                       |  Brief                               |
+=================================================+======================================+
|  :c:func:`float_complex_s16_mul()`              | :math:`x \times y`                   |
+-------------------------------------------------+--------------------------------------+
|  :c:func:`float_complex_s16_add()`              | :math:`x + y`                        |
+-------------------------------------------------+--------------------------------------+
|  :c:func:`float_complex_s16_sub()`              | :math:`x - y`                        |
+-------------------------------------------------+--------------------------------------+
|  :c:func:`float_complex_s32_mul()`              | :math:`x \times y`                   |
+-------------------------------------------------+--------------------------------------+
|  :c:func:`float_complex_s32_add()`              | :math:`x + y`                        |
+-------------------------------------------------+--------------------------------------+
|  :c:func:`float_complex_s32_sub()`              | :math:`x - y`                        |
+-------------------------------------------------+--------------------------------------+

